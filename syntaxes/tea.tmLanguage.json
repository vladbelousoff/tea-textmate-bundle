{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Tea",
    "scopeName": "source.tea",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#types"
        },
        {
            "include": "#functions"
        },
        {
            "include": "#structs"
        },
        {
            "include": "#impl-blocks"
        },
        {
            "include": "#variables"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#punctuation"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.tea",
                    "begin": "//",
                    "end": "$",
                    "patterns": [
                        {
                            "name": "meta.toc-list.todo.tea",
                            "match": "(?i:todo|fixme|hack|note).*$"
                        }
                    ]
                },
                {
                    "name": "comment.block.tea",
                    "begin": "/\\*",
                    "end": "\\*/",
                    "patterns": [
                        {
                            "name": "meta.toc-list.todo.tea",
                            "match": "(?i:todo|fixme|hack|note).*$"
                        }
                    ]
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.tea",
                    "match": "\\b(if|else|while|return|continue|break)\\b"
                },
                {
                    "name": "keyword.other.tea",
                    "match": "\\b(let|mut|fn|struct|impl|new|self)\\b"
                },
                {
                    "name": "constant.language.boolean.tea",
                    "match": "\\b(true|false)\\b"
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "name": "storage.type.primitive.tea",
                    "match": "\\b(i32|f32|int|float|string)\\b"
                },
                {
                    "name": "entity.name.type.tea",
                    "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "name": "meta.function.definition.tea",
                    "begin": "\\b(fn)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.other.tea"
                        },
                        "2": {
                            "name": "entity.name.function.tea"
                        }
                    },
                    "end": "\\{",
                    "patterns": [
                        {
                            "include": "#function-parameters"
                        },
                        {
                            "include": "#function-return-type"
                        }
                    ]
                },
                {
                    "name": "meta.function.call.tea",
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()",
                    "captures": {
                        "1": {
                            "name": "entity.name.function.call.tea"
                        }
                    }
                }
            ]
        },
        "function-parameters": {
            "patterns": [
                {
                    "name": "meta.parameter.tea",
                    "match": "([a-zA-Z_][a-zA-Z0-9_]*)\\s*:\\s*([a-zA-Z_][a-zA-Z0-9_]*)",
                    "captures": {
                        "1": {
                            "name": "variable.parameter.tea"
                        },
                        "2": {
                            "name": "storage.type.tea"
                        }
                    }
                }
            ]
        },
        "function-return-type": {
            "patterns": [
                {
                    "name": "meta.function.return-type.tea",
                    "match": "->\\s*([a-zA-Z_][a-zA-Z0-9_]*)",
                    "captures": {
                        "1": {
                            "name": "storage.type.tea"
                        }
                    }
                }
            ]
        },
        "structs": {
            "patterns": [
                {
                    "name": "meta.struct.definition.tea",
                    "begin": "\\b(struct)\\s+([A-Z][a-zA-Z0-9_]*)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.other.tea"
                        },
                        "2": {
                            "name": "entity.name.type.struct.tea"
                        }
                    },
                    "end": "\\}",
                    "patterns": [
                        {
                            "include": "#struct-fields"
                        },
                        {
                            "include": "#comments"
                        }
                    ]
                }
            ]
        },
        "struct-fields": {
            "patterns": [
                {
                    "name": "meta.struct.field.tea",
                    "match": "([a-zA-Z_][a-zA-Z0-9_]*)\\s*:\\s*([a-zA-Z_][a-zA-Z0-9_]*);",
                    "captures": {
                        "1": {
                            "name": "variable.other.member.tea"
                        },
                        "2": {
                            "name": "storage.type.tea"
                        }
                    }
                }
            ]
        },
        "impl-blocks": {
            "patterns": [
                {
                    "name": "meta.impl.definition.tea",
                    "begin": "\\b(impl)\\s+([A-Z][a-zA-Z0-9_]*)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.other.tea"
                        },
                        "2": {
                            "name": "entity.name.type.tea"
                        }
                    },
                    "end": "\\}",
                    "patterns": [
                        {
                            "include": "#functions"
                        },
                        {
                            "include": "#comments"
                        },
                        {
                            "include": "#keywords"
                        },
                        {
                            "include": "#types"
                        },
                        {
                            "include": "#variables"
                        },
                        {
                            "include": "#strings"
                        },
                        {
                            "include": "#numbers"
                        },
                        {
                            "include": "#operators"
                        },
                        {
                            "include": "#punctuation"
                        }
                    ]
                }
            ]
        },
        "variables": {
            "patterns": [
                {
                    "name": "meta.variable.declaration.tea",
                    "begin": "\\b(let)\\s+(mut\\s+)?([a-zA-Z_][a-zA-Z0-9_]*)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.other.tea"
                        },
                        "2": {
                            "name": "keyword.other.tea"
                        },
                        "3": {
                            "name": "variable.other.tea"
                        }
                    },
                    "end": ";",
                    "patterns": [
                        {
                            "include": "#type-annotation"
                        },
                        {
                            "include": "#expressions"
                        }
                    ]
                },
                {
                    "name": "variable.language.self.tea",
                    "match": "\\bself\\b"
                }
            ]
        },
        "type-annotation": {
            "patterns": [
                {
                    "name": "meta.type.annotation.tea",
                    "match": ":\\s*([a-zA-Z_][a-zA-Z0-9_]*)",
                    "captures": {
                        "1": {
                            "name": "storage.type.tea"
                        }
                    }
                }
            ]
        },
        "expressions": {
            "patterns": [
                {
                    "include": "#strings"
                },
                {
                    "include": "#numbers"
                },
                {
                    "include": "#operators"
                },
                {
                    "include": "#function-calls"
                },
                {
                    "include": "#struct-instantiation"
                }
            ]
        },
        "struct-instantiation": {
            "patterns": [
                {
                    "name": "meta.struct.instantiation.tea",
                    "begin": "\\b(new)\\s+([A-Z][a-zA-Z0-9_]*)\\s*\\{",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.other.tea"
                        },
                        "2": {
                            "name": "entity.name.type.tea"
                        }
                    },
                    "end": "\\}",
                    "patterns": [
                        {
                            "include": "#struct-field-assignment"
                        },
                        {
                            "include": "#comments"
                        }
                    ]
                }
            ]
        },
        "struct-field-assignment": {
            "patterns": [
                {
                    "name": "meta.struct.field.assignment.tea",
                    "match": "([a-zA-Z_][a-zA-Z0-9_]*)\\s*:",
                    "captures": {
                        "1": {
                            "name": "variable.other.member.tea"
                        }
                    }
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.single.tea",
                    "begin": "'",
                    "end": "'",
                    "patterns": [
                        {
                            "name": "constant.character.escape.tea",
                            "match": "\\\\."
                        }
                    ]
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.float.tea",
                    "match": "\\b\\d+\\.\\d+\\b"
                },
                {
                    "name": "constant.numeric.integer.tea",
                    "match": "\\b\\d+\\b"
                },
                {
                    "name": "constant.numeric.negative.tea",
                    "match": "-\\d+(\\.\\d+)?\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.assignment.tea",
                    "match": "="
                },
                {
                    "name": "keyword.operator.comparison.tea",
                    "match": "(==|!=|<=|>=|<|>)"
                },
                {
                    "name": "keyword.operator.logical.tea",
                    "match": "(&&|\\|\\||!)"
                },
                {
                    "name": "keyword.operator.arithmetic.tea",
                    "match": "(\\+|-|\\*|/|%)"
                },
                {
                    "name": "keyword.operator.access.tea",
                    "match": "\\."
                }
            ]
        },
        "punctuation": {
            "patterns": [
                {
                    "name": "punctuation.section.block.begin.tea",
                    "match": "\\{"
                },
                {
                    "name": "punctuation.section.block.end.tea",
                    "match": "\\}"
                },
                {
                    "name": "punctuation.section.parens.begin.tea",
                    "match": "\\("
                },
                {
                    "name": "punctuation.section.parens.end.tea",
                    "match": "\\)"
                },
                {
                    "name": "punctuation.section.brackets.begin.tea",
                    "match": "\\["
                },
                {
                    "name": "punctuation.section.brackets.end.tea",
                    "match": "\\]"
                },
                {
                    "name": "punctuation.terminator.tea",
                    "match": ";"
                },
                {
                    "name": "punctuation.separator.tea",
                    "match": ","
                },
                {
                    "name": "punctuation.separator.type.tea",
                    "match": ":"
                },
                {
                    "name": "punctuation.separator.return-type.tea",
                    "match": "->"
                }
            ]
        }
    }
} 